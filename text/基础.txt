js   

----------------------------------------------------------------------------------
1 . NaN是特殊的Number 与所有其他值都不相等 , 包括它自己
   NaN === NaN   (false)  唯一能判断NaN的方法是isNaN()函数
--------------------------------------------------------------------------------
2  计算机无法精确表示无线循环小数  要比较两个浮点数是否相等,只能计算它们之差的绝对值 , 看是否小于某个值

	1 / 3 === (1 - 2 / 3); // false
	Math.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true
---------------------------------------------------------------------------------

3 null 一个空的值
  0    是一个数值
  ''  表示长度为0的字符串
  undefined  值未定义

大多数情况用null,
undefined 在判断函数参数是否传递的清况下有用
-------------------------------------------------------------------------------
4  'I\'m \"OK\"!';转义字符 \  结果为I'm "OK"!
   \n  表示换行   
   字符\也要转移  \\表示\

   ASCII 字符可以\x##形式十六进制表示   '\x41'; 等同于 'A'
  可以用\u####表示一个Unicode字符：  '\u4e2d\u6587';等同于 '中文'

  多行字符串 用\n表示比较费事  es6用反引号表示(数字键1 的左边那个键)

  +号连接多个字符串  es6用模板字符串 $(变量名) 中间无+号  不支持!!!

 js  为字符串提供了一些方法 , 这些方法不会改变原有字符串 , 而是返回一个新的字符串

 toUpperCase()把一个字符串全部变为大写
 toLowerCase()                    小写
 indexOf() 会搜索指定字符串出现的位置  没有找到指定的子串,返回-1
 substring()返回指定索引区域的子串  不传参数返回全部字符相当于复制

----------------------------------------------------------------------------------
数组

不建议:

直接给Array的length附一个新的值会导致Array大小的变化

Array可以通过索引把对应的元素修改为新的值，对Array的索引进行赋值会直接修改这个Array

如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化：


方法 :

indexOf() 搜索一个指定元素的位置  找不到返回-1

slice() 截取部分元素 , 返回一个新数组 (开始下标) 不传参数截取全部元素相当于复制

push()和pop() 
	push()像末尾添加元素    返回新数组的长度
	pop()把素组的最后一个元素删除   返回删除的元素    空数组pop()返回undefined

unshift和shift
	unshift()往元素头部添加元素
	shift() 删除第一个元素


sort() 对当前数组排序 直接修改当前数组元素的位置

reverse() 反转  修改原有数组

splice(开始下标,删除个数,添加的元素1,元素2)  返回删除的元素 (数组形式)
  **万能方法  可从指定位置删除,从该位置添加元素
	splice(2,0,'aa','bb') 只添加  不删除  
	splice(2,3)         只删除  不添加
	

concat() 把当前的数组和另一个数组连接起来, 并返回一个新的数组  没修改当前的数组

join() 返回字符串   把元素用指定的字符串连接起来	
	如果数组里的元素不是字符串, 将自动转为字符串后再连接



多维数组  (数组的某个元素又是一个数组)

--------------------------------------------------------------------------------
对象

属性名包含-特殊字符 用""包起来  获取属性值 不能用.   只能用 对象['属性-名']

访问不存在的属性不报错  返回undefind;

查看属性是不是对象的  可用in  '属性' in 对象 (继承的也是true)
	只属于自身的属性   对象.hasOwnProperty('属性')


把 null undefined 0 NaN 空字符串 视为false; 其余为true;

-------------------------------------------------------------------------------

循环 
--------------
for   


 var x = 0;
 for(;;){  //无限循环 
     if(x>100){
	break; //退出循环

    }
   x++;
}

-------------
for key in 对象    可以把一个对象的所有属性依次循环出来;

key 代表属性


array 也是对象 , 索引被视为对象的属性  for .. in  可以循环出array的索引  得到的是string不是number

-------------
while   只有一个判断条件   条件满足 , 就不断循环 , 不满足就退出循环

	while(条件){
	    执行语句...
	}


-------------
do...while   每次循环完成判断条件

至少执行一次


------------------------------------------------------------------------------------------------------

Map和Set   es6中新增的数据类型
--------------
Map是一组键值对的结构 , 具有极块的查找速度

var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);

m.get('Michael'); // 95

var m = new Map();初始化一个空的map    

m.set('键',值)     //添加新的key-value;

m.has('键'')    //是否存在这个键

m.get(key)   //获得值

m.delete(key)   //删除key

-------------
set()

 是一组key的集合 , 但不存储value

 add() 添加key
 
 delete(key) 删除key


-------------------
iterable类型   :  array ,map  set都属于这个类型

具有iterable 类型的集合可以通过新的for...of 循环来遍历

for .. of 是es6 引入的新的语法    **不可遍历对象**

-------
for in  的问题   遍历数组出来的是索引  手动添加属性后 ,也把这个属性包含在内

for of   修复了这些问题   它只循环集合本身的元素

-------
更好的方式是直接使用iterable内置的方法


以数组为例

forEach(function(element,index,array){
	element是数组元素
	index  是索引
	array   是数组本身

})

set与数组类似,但set没有索引 , forEach遍历的厚底凹函数的前两个参数都是元素本身.

map 的回调参数依次为  value , key ,map本身









































	